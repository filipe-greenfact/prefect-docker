name: 1 Initial - Deploy Prefect agent to ECS

on:
  workflow_dispatch:
    inputs:
      cpu:
        description: CPU for the agent
        required: true
        default: '512'
        type: choice
        options: ['256', '512', '1024', '2048', '4096']
      memory:
        description: Memory for the agent
        required: true
        default: '1024'
        type: choice
        options: ['512', '1024', '2048', '4096', '5120', '6144', '7168', '8192']
      s3_path:
        description: S3 path in the format bucket/path
        required: true
        default: 'prefect-orion/prod'
      block_name:
        description: Name of the S3 and ECS blocks
        required: true
        default: 'prod'
      prefect-version:
        description: Prefect version for flows
        required: true
        default: '2.*'
        type: string
      aws-region:
        description: AWS Region
        required: true
        default: 'us-east-1'
        type: string

env:
  PROJECT: dataflowops
  ECS_CLUSTER: prefect
  BLOCK: ${{ github.event.inputs.block_name }}
  AWS_REGION: ${{ github.event.inputs.aws-region }}
  PREFECT_VERSION: ${{ github.event.inputs.prefect-version }}

jobs:
  ecr-repo:
    name: ECR Repo & Image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'no'

      - name: Create new ECR repository using AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: "${{ env.PROJECT }}-ecr"
          template: infrastructure/ecr_repository.yml
          parameter-overrides: "RepositoryName=${{ env.PROJECT }}"
          no-fail-on-empty-changeset: "1"

      - name: Flow deployment finished
        run: echo "ECR repository created at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$PROJECT:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$PROJECT:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$PROJECT:$IMAGE_TAG"

      - name: Flow deployments finished
        run: echo "ECR image ${{ steps.build-image.outputs.image }} built at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

  prefect-agent-ecs:
    name: ECS Cluster & Prefect Agent
    runs-on: ubuntu-latest
    needs: ecr-repo
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'no'

      - name: Add Prefect Cloud Secrets to SSM Parameter Store (needed for container in ECS task)
        id: aws
        run: |
          aws ssm put-parameter --type SecureString --name PREFECT_API_URL --value ${{ secrets.PREFECT_API_URL }} --overwrite
          aws ssm put-parameter --type SecureString --name PREFECT_API_KEY --value ${{ secrets.PREFECT_API_KEY }} --overwrite
          export AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
          echo ::set-output name=accountid::$AWS_ACCOUNT_ID

      - name: Deploy to ECS with AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.PROJECT }}
          template: infrastructure/ecs_cluster_prefect_agent.yml
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: "cpu=${{ github.event.inputs.cpu }},memory=${{ github.event.inputs.memory }},project=${{ env.PROJECT }},cluster=${{ env.ECS_CLUSTER }},image=${{ needs.ecr-repo.outputs.image }},awsaccountid=${{steps.aws.outputs.accountid}},region=${{ env.AWS_REGION }}"

      - name: ECS Service Deployment finished
        run: echo "ECS Service Deployment finished at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

      - name: Generate task definition
        id: task-definition
        run: aws ecs describe-task-definition --task-definition ${{ env.PROJECT }} --query taskDefinition > task-definition.json

      - name: Upload task definition as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ECS task definition
          path: task-definition.json

      - name: Summary
        run: echo 'AWS ECS agent successfully deployed and ready to run your flows! :rocket:' >> $GITHUB_STEP_SUMMARY

  blocks:
    name: Prefect Blocks
    runs-on: ubuntu-latest
    needs: ecr-repo
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Python dependencies
        run: |
          pip install -U "prefect==$PREFECT_VERSION"
          pip install s3fs prefect-aws
          prefect block register -m prefect_aws.ecs

      - name: Prefect Cloud login
        run: |
          prefect config set PREFECT_API_KEY=${{ secrets.PREFECT_API_KEY }}
          prefect config set PREFECT_API_URL=${{ secrets.PREFECT_API_URL }}

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'no'

      - name: Prefect Blocks
        id: aws_ecs_ecs_blocks
        run: |
          export AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
          cat <<EOF > aws_ecs_blocks.py
          from prefect.filesystems import S3
          from prefect_aws.ecs import ECSTask, AwsCredentials
          
          id_ = "${{ secrets.AWS_ACCESS_KEY_ID }}"
          key_ = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          path_ = "${{ github.event.inputs.s3_path }}"
          img_ = "${{ needs.ecr-repo.outputs.image }}"
          block_ = "${{ env.BLOCK }}"
          cluster_ = "${{ env.ECS_CLUSTER }}"
          cpu_ = "${{ github.event.inputs.cpu }}"
          memory_ = "${{ github.event.inputs.memory }}"
          aws_acc_id = "$AWS_ACCOUNT_ID"
          exec_role = f"arn:aws:iam::{aws_acc_id}:role/dataflowops_ecs_execution_role"
          task_role = f"arn:aws:iam::{aws_acc_id}:role/dataflowops_ecs_execution_role"
          
          aws_creds = AwsCredentials(aws_access_key_id=id_, aws_secret_access_key=key_)
          aws_creds.save(block_, overwrite=True)
          
          s3 = S3(bucket_path=path_, aws_access_key_id=id_, aws_secret_access_key=key_)
          s3.save(block_, overwrite=True)
          
          ecs = ECSTask(
              aws_credentials=aws_creds,
              image=img_,
              cpu=cpu_,
              memory=memory_,
              stream_output=True,
              configure_cloudwatch_logs=True,
              cluster=cluster_,
              execution_role_arn=exec_role,
              task_role_arn=task_role,
          )
          ecs.save(block_, overwrite=True)
          EOF
          python aws_ecs_blocks.py
      - name: Blocks creation finished
        run: echo "AWS and ECS blocks built at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

  list-flows:
    name: List Prefect flows
    runs-on: ubuntu-latest
    needs: blocks
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: set-matrix
        run: echo "::set-output name=matrix::$(ls flows/*.py | jq -R -s -c 'split("\n")[:-1]')"

  deploy:
    name: Deploy
    needs: list-flows
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flows: ${{ fromJson(needs.list-flows.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Python dependencies
        run: |
          pip install -U "prefect==$PREFECT_VERSION"
          pip install s3fs
          pip install .

      - name: Prefect Cloud login
        run: |
          prefect config set PREFECT_API_KEY=${{ secrets.PREFECT_API_KEY }} 
          prefect config set PREFECT_API_URL=${{ secrets.PREFECT_API_URL }}

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'no'

      - name: Deploy flows to S3
        id: build
        run: |
          FLOW_NAME=$(basename ${{ matrix.flows }} .py)
          prefect deployment build ${{ matrix.flows }}:$FLOW_NAME -ib ecs-task/${{ env.BLOCK }} -sb s3/${{ env.BLOCK }} \
          -n ${{ env.PROJECT }} -q ${{ env.PROJECT }} -v $GITHUB_SHA -o $FLOW_NAME.yaml -a
          echo ::set-output name=flow_manifest::$FLOW_NAME.yaml
          
          prefect deployment build ${{ matrix.flows }}:$FLOW_NAME -sb s3/${{ env.BLOCK }} \
          -n ${{ env.PROJECT }}-local -q ${{ env.PROJECT }} -v $GITHUB_SHA -o $FLOW_NAME_local.yaml -a

      - name: Upload YAML deployment manifest as artifact
        uses: actions/upload-artifact@v3
        with:
          name: Deployment YAML manifests
          path: ${{ steps.build.outputs.flow_manifest }}
